using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using System.Text;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using EntangoApi.Models;
using EntangoApi.DTOs;

var builder = WebApplication.CreateBuilder(args);

// SQL SERVER connection configuration
var connectionString = builder.Configuration.GetConnectionString("EntangoDb");

builder.Services.AddDbContext<TownDb>(options => {
    options.UseSqlServer(connectionString);
});

builder.Services.AddDatabaseDeveloperPageExceptionFilter();

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
var securityScheme = new OpenApiSecurityScheme()
{
    Name = "Authorization",
    Type = SecuritySchemeType.ApiKey,
    Scheme = "Bearer",
    BearerFormat = "JWT",
    In = ParameterLocation.Header,
    Description = "JSON Web Token based security",
};

var securityReq = new OpenApiSecurityRequirement()
{
    {
        new OpenApiSecurityScheme
        {
            Reference = new OpenApiReference
            {
                Type = ReferenceType.SecurityScheme,
                Id = "Bearer"
            }
        },
        new string[] {}
    }
};

var contact = new OpenApiContact()
{
    Name = "Alex Smith",
    Email = "info@entango.net",
    Url = new Uri("http://www.entango.net")
};

var license = new OpenApiLicense()
{
    Name = "Free License",
    Url = new Uri("http://www.entango.net")
};

var info = new OpenApiInfo()
{
    Version = "v1",
    Title = "Minimal API - JWT Authentication with Swagger",
    Description = "Implementing JWT Authentication in Minimal API",
    TermsOfService = new Uri("http://www.entango.net"),
    Contact = contact,
    License = license
};

// Add JWT configuration
builder.Services.AddAuthentication(o =>
{
    o.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    o.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    o.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(o =>
{
    o.TokenValidationParameters = new TokenValidationParameters
    {
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"])),
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = false,
        ValidateIssuerSigningKey = true
    };
});

builder.Services.AddAuthorization();

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(o =>
{
    o.SwaggerDoc("v1", info);
    o.AddSecurityDefinition("Bearer", securityScheme);
    o.AddSecurityRequirement(securityReq);
});


var app = builder.Build();


// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
    //app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json",
    //                                $"{builder.Environment.ApplicationName} v1"));
}

app.UseHttpsRedirection();
app.UseAuthentication();

app.MapGet("/", () => "This is ENTANGO api , welcome!");
app.MapGet("/info", () => "the target of project ENTANGO is to provide a wide range of APIs useful for different purposes");

#region Token

app.MapPost("/security/getToken", [AllowAnonymous] (UserDto user) =>
{
    //retrieve user
    //var User = await db.Users.FindAsync(user.UserName);

    if (user.UserName == "info@entango.net" && user.Password == "Passw0rd")
    {
        var issuer = builder.Configuration["Jwt:Issuer"];
        var audience = builder.Configuration["Jwt:Audience"];
        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]));
        var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

        // Now its ime to define the jwt token which will be responsible of creating our tokens
        var jwtTokenHandler = new JwtSecurityTokenHandler();

        // We get our secret from the appsettings
        var key = Encoding.ASCII.GetBytes(builder.Configuration["Jwt:Key"]);

        // we define our token descriptor
        // We need to utilise claims which are properties in our token which gives information about the token
        // which belong to the specific user who it belongs to
        // so it could contain their id, name, email the good part is that these information
        // are generated by our server and identity framework which is valid and trusted
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[]
            {
                new Claim("Id", "1"),
                new Claim(JwtRegisteredClaimNames.Sub, user.UserName),
                new Claim(JwtRegisteredClaimNames.Email, user.UserName),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
            // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
            // but since this is a demo app we can extend it to fit our current need
            Expires = DateTime.UtcNow.AddHours(6),
            Audience = audience,
            Issuer = issuer,
            // here we are adding the encryption alogorithim information which will be used to decrypt our token
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
        };

        var token = jwtTokenHandler.CreateToken(tokenDescriptor);

        var jwtToken = jwtTokenHandler.WriteToken(token);

        return Results.Ok(jwtToken);
    }
    else
    {
        return Results.Unauthorized();
    }
}).WithTags("Token");

#endregion

#region Town

//POST town
app.MapPost("/towns", [Authorize] async (Town town, TownDb db) =>
{
    db.Towns.Add(town);
    await db.SaveChangesAsync();

    return Results.Created($"/towns/{town.Id}", town);
}).WithTags("Towns");

//GET all towns (limited to 500 elements)
app.MapGet("/towns", /*[Authorize]*/ async (TownDb db) =>
    await db.Towns
    .Take(10000)
    .OrderBy(Id => Id)
    .ToListAsync())
    .WithTags("Towns"); //serve per raggruppare gli endpoints

//GET by page
app.MapGet("/towns_by_page", [Authorize] async (int pageNumber, int pageSize, TownDb db) =>
 await db.Towns
    .Skip((pageNumber-1) * pageSize)
    .Take(pageSize)
    .ToListAsync()
//await db.Books.ToListAsync()
).WithTags("Towns");

//GET by province
app.MapGet("/towns_by_province", [Authorize] async (string provinceCode, TownDb db) =>
    await db.Towns
    .Where(x => x.ProvinceAbbreviation==provinceCode).ToListAsync()).WithTags("Towns");

//GET by id
app.MapGet("/towns/{id}", [Authorize] async (int id, TownDb db) =>
    await db.Towns.FindAsync(id)
        is Town town
            ? Results.Ok(town)
            : Results.NotFound()).WithTags("Towns");

//PUT
app.MapPut("/towns/{id}", [Authorize] async (int id, Town inputTown, TownDb db) =>
{
    var town = await db.Towns.FindAsync(id);

    if (town is null) return Results.NotFound();

    town.Name = inputTown.Name;
    town.IstatCode = inputTown.IstatCode;
    town.ProvinceCode = inputTown.ProvinceCode;

    await db.SaveChangesAsync();

    return Results.NoContent();
}).WithTags("Towns");

//DELETE
app.MapDelete("/towns/{id}", [Authorize] async (int id, TownDb db) =>
{
    if (await db.Towns.FindAsync(id) is Town town)
    {
        db.Towns.Remove(town);
        await db.SaveChangesAsync();
        return Results.Ok(town);
    }

    return Results.NotFound();
}).WithTags("Towns");

#endregion

//Run
app.Run();